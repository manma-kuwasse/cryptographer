'use strict';
//モールス信号
let string = {"0": "----- ","1": ".---- ","2": "..--- ","3": "...-- ","4": "....- ","5": "..... ","6": "-.... ","7": "--... ","8": "---.. ","9": "----. ","a": ".- ","b": "-... ","c": "-.-. ","d": "-.. ","e": ". ","f": "..-. ","g": "--. ","h": ".... ","i": ".. ","j": ".--- ","k": "-.- ","l": ".-.. ","m": "-- ","n": "-. ","o": "--- ","p": ".--. ","q": "--.- ","r": ".-. ","s": "... ","t": "- ","u": "..- ","v": "...- ","w": ".-- ","x": "-..- ","y": "-.-- ","z": "--.. ",".": ".-.-.- ",",": "--..-- ","?": "..--.. ","!": "-.-.-- ","-": "-....- ","/": "-..-. ","@": ".--.-. ","(": "-.--. ",")": "-.--.- ","": " ",},out;

function encode(e) {
  out = ""; //変数outリセット

  //大文字,改行を消して一文字ずつ区切って配列化
  e = e.toLowerCase().replace(/[\n\r]/g,"").split("");
  //>"Hello." → ["h","e","l","l","o","."]
  
  //一文字ずつモールス信号へ置き換えて、変数outに加える
  //json[e[i]]は文字が"h"の場合はjson.hのように動作する
  for (let i = 0; i < e.length; i++) {
    out = out + json[e[i]];
  }
  //>["h","e","l","l","o","."] → ".... . .-.. .-.. --- .-.-.- "

  console.out(out);
}

//サンプル
encode("Hello.");
//>".... . .-.. .-.. --- .-.-.- "


let secret = {"0": "----- ","1": ".---- ","2": "..--- ","3": "...-- ","4": "....- ","5": "..... ","6": "-.... ","7": "--... ","8": "---.. ","9": "----. ","a": ".- ","b": "-... ","c": "-.-. ","d": "-.. ","e": ". ","f": "..-. ","g": "--. ","h": ".... ","i": ".. ","j": ".--- ","k": "-.- ","l": ".-.. ","m": "-- ","n": "-. ","o": "--- ","p": ".--. ","q": "--.- ","r": ".-. ","s": "... ","t": "- ","u": "..- ","v": "...- ","w": ".-- ","x": "-..- ","y": "-.-- ","z": "--.. ",".": ".-.-.- ",",": "--..-- ","?": "..--.. ","!": "-.-.-- ","-": "-....- ","/": "-..-. ","@": ".--.-. ","(": "-.--. ",")": "-.--.- ","": " ",},out;

// モールス信号 → 英語
function decode(e) {
  out = ""; //変数outリセット
  
  //半角スペースで区切って配列化
  //カッコの中は最後に半角スペースが入ってない時のために最後に半角スペースを追加
  e = (e + " ").split(" ");
  
  //1つずつ英文に置き換えて変数outに加える
  for (let i = 0; i < e.length; i++) {
    let result = Object.keys(json).filter(
      function (k) {
        return json[k] == e[i] + " "
      }
    )[0];
    out = out + result;
  }
  
  //エラー処理
  if (out.includes("undefined")){
    out = "error：正しい信号を入力してください";
  }
  
  console.out(out);
}

//サンプル
decode(".... . .-.. .-.. --- .-.-.-");
//>"hello."